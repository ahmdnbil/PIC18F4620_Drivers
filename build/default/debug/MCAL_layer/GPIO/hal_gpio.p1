Version 4.0 HI-TECH Software Intermediate Code
"90 MCAL_layer/GPIO/./hal_gpio.h
[; ;MCAL_layer/GPIO/./hal_gpio.h: 90: {
[s S8 :3 `uc 1 :3 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S8 . port pin direction logic ]
"45 MCAL_layer/GPIO/hal_gpio.c
[; ;MCAL_layer/GPIO/hal_gpio.c: 45:         }
[c E496 0 1 .. ]
[n E496 . OUTPUT INPUT  ]
"82
[; ;MCAL_layer/GPIO/hal_gpio.c: 82: Std_ReturnType gpio_pin_write_logic(const pin_config_t* _pin_config,logic_t logic)
[c E492 0 1 .. ]
[n E492 . LOW HIGH  ]
"184
[; ;MCAL_layer/GPIO/hal_gpio.c: 184: Std_ReturnType gpio_port_direction_initalize(port_index_t port,uint8 direction)
[c E510 0 1 2 3 4 .. ]
[n E510 . PORTA_INDEX PORTB_INDEX PORTC_INDEX PORTD_INDEX PORTE_INDEX  ]
"15 MCAL_layer/GPIO/hal_gpio.c
[; ;MCAL_layer/GPIO/hal_gpio.c: 15: volatile uint8 *tris_registers[] ={&*((uint8 volatile*)0xF92),&*((uint8 volatile*)0xF93),&*((uint8 volatile*)0xF94),&*((uint8 volatile*)0xF95),&*((uint8 volatile*)0xF96)};
[v _tris_registers `*Vuc ~T0 @X0 -> 5 `i e ]
[i _tris_registers
:U ..
&U *U -> -> 3986 `i `*Vuc
&U *U -> -> 3987 `i `*Vuc
&U *U -> -> 3988 `i `*Vuc
&U *U -> -> 3989 `i `*Vuc
&U *U -> -> 3990 `i `*Vuc
..
]
"16
[; ;MCAL_layer/GPIO/hal_gpio.c: 16: volatile uint8 *lat_registers[] ={&*((uint8 volatile*)0xF89),&*((uint8 volatile*)0xF8A),&*((uint8 volatile*)0xF8B),&*((uint8 volatile*)0xF8C),&*((uint8 volatile*)0xF8D)};
[v _lat_registers `*Vuc ~T0 @X0 -> 5 `i e ]
[i _lat_registers
:U ..
&U *U -> -> 3977 `i `*Vuc
&U *U -> -> 3978 `i `*Vuc
&U *U -> -> 3979 `i `*Vuc
&U *U -> -> 3980 `i `*Vuc
&U *U -> -> 3981 `i `*Vuc
..
]
"17
[; ;MCAL_layer/GPIO/hal_gpio.c: 17: volatile uint8 *port_registers[] ={&*((uint8 volatile*)0xF80),&*((uint8 volatile*)0xF81),&*((uint8 volatile*)0xF82),&*((uint8 volatile*)0xF83),&*((uint8 volatile*)0xF84)};
[v _port_registers `*Vuc ~T0 @X0 -> 5 `i e ]
[i _port_registers
:U ..
&U *U -> -> 3968 `i `*Vuc
&U *U -> -> 3969 `i `*Vuc
&U *U -> -> 3970 `i `*Vuc
&U *U -> -> 3971 `i `*Vuc
&U *U -> -> 3972 `i `*Vuc
..
]
"28
[; ;MCAL_layer/GPIO/hal_gpio.c: 28: Std_ReturnType gpio_pin_direction_initalize(const pin_config_t* _pin_config)
[v _gpio_pin_direction_initalize `(uc ~T0 @X0 1 ef1`*CS8 ]
"29
[; ;MCAL_layer/GPIO/hal_gpio.c: 29: {
{
[e :U _gpio_pin_direction_initalize ]
"28
[; ;MCAL_layer/GPIO/hal_gpio.c: 28: Std_ReturnType gpio_pin_direction_initalize(const pin_config_t* _pin_config)
[v __pin_config `*CS8 ~T0 @X0 1 r1 ]
"29
[; ;MCAL_layer/GPIO/hal_gpio.c: 29: {
[f ]
"30
[; ;MCAL_layer/GPIO/hal_gpio.c: 30:     Std_ReturnType status=(Std_ReturnType)0x01;
[v _status `uc ~T0 @X0 1 a ]
[e = _status -> -> 1 `i `uc ]
"32
[; ;MCAL_layer/GPIO/hal_gpio.c: 32:     if(((void*)0)==_pin_config || _pin_config->pin > 8 -1 || _pin_config->port > 5 -1)
[e $ ! || || == -> -> -> 0 `i `*v `*CS8 __pin_config > -> . *U __pin_config 1 `i - -> 8 `i -> 1 `i > -> . *U __pin_config 0 `i - -> 5 `i -> 1 `i 10  ]
"33
[; ;MCAL_layer/GPIO/hal_gpio.c: 33:     {
{
"34
[; ;MCAL_layer/GPIO/hal_gpio.c: 34:         status =(Std_ReturnType)0x00;
[e = _status -> -> 0 `i `uc ]
"35
[; ;MCAL_layer/GPIO/hal_gpio.c: 35:     }
}
[e $U 11  ]
"36
[; ;MCAL_layer/GPIO/hal_gpio.c: 36:     else{
[e :U 10 ]
{
"37
[; ;MCAL_layer/GPIO/hal_gpio.c: 37:         switch (_pin_config->direction)
[e $U 13  ]
"38
[; ;MCAL_layer/GPIO/hal_gpio.c: 38:         {
{
"39
[; ;MCAL_layer/GPIO/hal_gpio.c: 39:             case OUTPUT: (*tris_registers[_pin_config->port]&=~((uint8)0x01<<_pin_config->pin));
[e :U 14 ]
[e =& *U *U + &U _tris_registers * -> . *U __pin_config 0 `ux -> -> # *U &U _tris_registers `ui `ux -> ~ << -> -> -> 1 `i `uc `i -> . *U __pin_config 1 `i `uc ]
"40
[; ;MCAL_layer/GPIO/hal_gpio.c: 40:             break;
[e $U 12  ]
"41
[; ;MCAL_layer/GPIO/hal_gpio.c: 41:             case INPUT: (*tris_registers[_pin_config->port]|=((uint8)0x01<<_pin_config->pin));
[e :U 15 ]
[e =| *U *U + &U _tris_registers * -> . *U __pin_config 0 `ux -> -> # *U &U _tris_registers `ui `ux -> << -> -> -> 1 `i `uc `i -> . *U __pin_config 1 `i `uc ]
"42
[; ;MCAL_layer/GPIO/hal_gpio.c: 42:             break;
[e $U 12  ]
"43
[; ;MCAL_layer/GPIO/hal_gpio.c: 43:             default: status=(Std_ReturnType)0x00;
[e :U 16 ]
[e = _status -> -> 0 `i `uc ]
"44
[; ;MCAL_layer/GPIO/hal_gpio.c: 44:             break;
[e $U 12  ]
"45
[; ;MCAL_layer/GPIO/hal_gpio.c: 45:         }
}
[e $U 12  ]
[e :U 13 ]
[e [\ -> . *U __pin_config 2 `i , $ . `E496 0 14
 , $ . `E496 1 15
 16 ]
[e :U 12 ]
"46
[; ;MCAL_layer/GPIO/hal_gpio.c: 46:     }
}
[e :U 11 ]
"47
[; ;MCAL_layer/GPIO/hal_gpio.c: 47:     return status;
[e ) _status ]
[e $UE 9  ]
"48
[; ;MCAL_layer/GPIO/hal_gpio.c: 48: }
[e :UE 9 ]
}
"60
[; ;MCAL_layer/GPIO/hal_gpio.c: 60: Std_ReturnType gpio_pin_get_direction_status(const pin_config_t* _pin_config,direction_t *direction_status)
[v _gpio_pin_get_direction_status `(uc ~T0 @X0 1 ef2`*CS8`*E496 ]
"61
[; ;MCAL_layer/GPIO/hal_gpio.c: 61: {
{
[e :U _gpio_pin_get_direction_status ]
"60
[; ;MCAL_layer/GPIO/hal_gpio.c: 60: Std_ReturnType gpio_pin_get_direction_status(const pin_config_t* _pin_config,direction_t *direction_status)
[v __pin_config `*CS8 ~T0 @X0 1 r1 ]
[v _direction_status `*E496 ~T0 @X0 1 r2 ]
"61
[; ;MCAL_layer/GPIO/hal_gpio.c: 61: {
[f ]
"62
[; ;MCAL_layer/GPIO/hal_gpio.c: 62:     Std_ReturnType status=(Std_ReturnType)0x01;
[v _status `uc ~T0 @X0 1 a ]
[e = _status -> -> 1 `i `uc ]
"63
[; ;MCAL_layer/GPIO/hal_gpio.c: 63:     if(((void*)0)==_pin_config || ((void*)0) ==direction_status || _pin_config->pin > 8 -1 || _pin_config->port > 5 -1)
[e $ ! || || || == -> -> -> 0 `i `*v `*CS8 __pin_config == -> -> -> 0 `i `*v `*E496 _direction_status > -> . *U __pin_config 1 `i - -> 8 `i -> 1 `i > -> . *U __pin_config 0 `i - -> 5 `i -> 1 `i 18  ]
"64
[; ;MCAL_layer/GPIO/hal_gpio.c: 64:     {
{
"65
[; ;MCAL_layer/GPIO/hal_gpio.c: 65:         status=(Std_ReturnType)0x00;
[e = _status -> -> 0 `i `uc ]
"66
[; ;MCAL_layer/GPIO/hal_gpio.c: 66:     }
}
[e $U 19  ]
"67
[; ;MCAL_layer/GPIO/hal_gpio.c: 67:     else{
[e :U 18 ]
{
"68
[; ;MCAL_layer/GPIO/hal_gpio.c: 68:         *direction_status=(*tris_registers[_pin_config->port] >> _pin_config->pin) & (uint8)0x01;
[e = *U _direction_status -> & >> -> *U *U + &U _tris_registers * -> . *U __pin_config 0 `ux -> -> # *U &U _tris_registers `ui `ux `i -> . *U __pin_config 1 `i -> -> -> 1 `i `uc `i `E496 ]
"69
[; ;MCAL_layer/GPIO/hal_gpio.c: 69:     }
}
[e :U 19 ]
"70
[; ;MCAL_layer/GPIO/hal_gpio.c: 70:     return status;
[e ) _status ]
[e $UE 17  ]
"71
[; ;MCAL_layer/GPIO/hal_gpio.c: 71: }
[e :UE 17 ]
}
"82
[; ;MCAL_layer/GPIO/hal_gpio.c: 82: Std_ReturnType gpio_pin_write_logic(const pin_config_t* _pin_config,logic_t logic)
[v _gpio_pin_write_logic `(uc ~T0 @X0 1 ef2`*CS8`E492 ]
"83
[; ;MCAL_layer/GPIO/hal_gpio.c: 83: {
{
[e :U _gpio_pin_write_logic ]
"82
[; ;MCAL_layer/GPIO/hal_gpio.c: 82: Std_ReturnType gpio_pin_write_logic(const pin_config_t* _pin_config,logic_t logic)
[v __pin_config `*CS8 ~T0 @X0 1 r1 ]
[v _logic `E492 ~T0 @X0 1 r2 ]
"83
[; ;MCAL_layer/GPIO/hal_gpio.c: 83: {
[f ]
"84
[; ;MCAL_layer/GPIO/hal_gpio.c: 84:     Std_ReturnType status=(Std_ReturnType)0x01;
[v _status `uc ~T0 @X0 1 a ]
[e = _status -> -> 1 `i `uc ]
"85
[; ;MCAL_layer/GPIO/hal_gpio.c: 85:     if(((void*)0)==_pin_config || _pin_config->pin > 8 -1 || _pin_config->port > 5 -1)
[e $ ! || || == -> -> -> 0 `i `*v `*CS8 __pin_config > -> . *U __pin_config 1 `i - -> 8 `i -> 1 `i > -> . *U __pin_config 0 `i - -> 5 `i -> 1 `i 21  ]
"86
[; ;MCAL_layer/GPIO/hal_gpio.c: 86:     {
{
"87
[; ;MCAL_layer/GPIO/hal_gpio.c: 87:         status=(Std_ReturnType)0x00;
[e = _status -> -> 0 `i `uc ]
"88
[; ;MCAL_layer/GPIO/hal_gpio.c: 88:     }
}
[e $U 22  ]
"89
[; ;MCAL_layer/GPIO/hal_gpio.c: 89:     else{
[e :U 21 ]
{
"90
[; ;MCAL_layer/GPIO/hal_gpio.c: 90:         switch(logic)
[e $U 24  ]
"91
[; ;MCAL_layer/GPIO/hal_gpio.c: 91:         {
{
"92
[; ;MCAL_layer/GPIO/hal_gpio.c: 92:             case HIGH:
[e :U 25 ]
"93
[; ;MCAL_layer/GPIO/hal_gpio.c: 93:             (*lat_registers[_pin_config->port]|=((uint8)0x01<<_pin_config->pin));
[e =| *U *U + &U _lat_registers * -> . *U __pin_config 0 `ux -> -> # *U &U _lat_registers `ui `ux -> << -> -> -> 1 `i `uc `i -> . *U __pin_config 1 `i `uc ]
"94
[; ;MCAL_layer/GPIO/hal_gpio.c: 94:             break;
[e $U 23  ]
"96
[; ;MCAL_layer/GPIO/hal_gpio.c: 96:             case LOW:
[e :U 26 ]
"97
[; ;MCAL_layer/GPIO/hal_gpio.c: 97:             (*lat_registers[_pin_config->port]&=~((uint8)0x01<<_pin_config->pin));
[e =& *U *U + &U _lat_registers * -> . *U __pin_config 0 `ux -> -> # *U &U _lat_registers `ui `ux -> ~ << -> -> -> 1 `i `uc `i -> . *U __pin_config 1 `i `uc ]
"98
[; ;MCAL_layer/GPIO/hal_gpio.c: 98:             break;
[e $U 23  ]
"100
[; ;MCAL_layer/GPIO/hal_gpio.c: 100:             default: status=(Std_ReturnType)0x00;
[e :U 27 ]
[e = _status -> -> 0 `i `uc ]
"101
[; ;MCAL_layer/GPIO/hal_gpio.c: 101:             break;
[e $U 23  ]
"102
[; ;MCAL_layer/GPIO/hal_gpio.c: 102:         }
}
[e $U 23  ]
[e :U 24 ]
[e [\ -> _logic `ui , $ -> . `E492 1 `ui 25
 , $ -> . `E492 0 `ui 26
 27 ]
[e :U 23 ]
"103
[; ;MCAL_layer/GPIO/hal_gpio.c: 103:     }
}
[e :U 22 ]
"104
[; ;MCAL_layer/GPIO/hal_gpio.c: 104:     return status;
[e ) _status ]
[e $UE 20  ]
"105
[; ;MCAL_layer/GPIO/hal_gpio.c: 105: }
[e :UE 20 ]
}
"116
[; ;MCAL_layer/GPIO/hal_gpio.c: 116: Std_ReturnType gpio_pin_read_logic(const pin_config_t* _pin_config,logic_t *logic)
[v _gpio_pin_read_logic `(uc ~T0 @X0 1 ef2`*CS8`*E492 ]
"117
[; ;MCAL_layer/GPIO/hal_gpio.c: 117: {
{
[e :U _gpio_pin_read_logic ]
"116
[; ;MCAL_layer/GPIO/hal_gpio.c: 116: Std_ReturnType gpio_pin_read_logic(const pin_config_t* _pin_config,logic_t *logic)
[v __pin_config `*CS8 ~T0 @X0 1 r1 ]
[v _logic `*E492 ~T0 @X0 1 r2 ]
"117
[; ;MCAL_layer/GPIO/hal_gpio.c: 117: {
[f ]
"118
[; ;MCAL_layer/GPIO/hal_gpio.c: 118:     Std_ReturnType status=(Std_ReturnType)0x01;
[v _status `uc ~T0 @X0 1 a ]
[e = _status -> -> 1 `i `uc ]
"119
[; ;MCAL_layer/GPIO/hal_gpio.c: 119:     if(((void*)0)==_pin_config || ((void*)0) == logic || _pin_config->pin > 8 -1 || _pin_config->port > 5 -1)
[e $ ! || || || == -> -> -> 0 `i `*v `*CS8 __pin_config == -> -> -> 0 `i `*v `*E492 _logic > -> . *U __pin_config 1 `i - -> 8 `i -> 1 `i > -> . *U __pin_config 0 `i - -> 5 `i -> 1 `i 29  ]
"120
[; ;MCAL_layer/GPIO/hal_gpio.c: 120:     {
{
"121
[; ;MCAL_layer/GPIO/hal_gpio.c: 121:         status=(Std_ReturnType)0x00;
[e = _status -> -> 0 `i `uc ]
"122
[; ;MCAL_layer/GPIO/hal_gpio.c: 122:     }
}
[e $U 30  ]
"123
[; ;MCAL_layer/GPIO/hal_gpio.c: 123:     else{
[e :U 29 ]
{
"124
[; ;MCAL_layer/GPIO/hal_gpio.c: 124:         *logic=(*port_registers[_pin_config->port] >> _pin_config->pin) & (uint8)0x01;
[e = *U _logic -> & >> -> *U *U + &U _port_registers * -> . *U __pin_config 0 `ux -> -> # *U &U _port_registers `ui `ux `i -> . *U __pin_config 1 `i -> -> -> 1 `i `uc `i `E492 ]
"125
[; ;MCAL_layer/GPIO/hal_gpio.c: 125:     }
}
[e :U 30 ]
"126
[; ;MCAL_layer/GPIO/hal_gpio.c: 126:     return status;
[e ) _status ]
[e $UE 28  ]
"127
[; ;MCAL_layer/GPIO/hal_gpio.c: 127: }
[e :UE 28 ]
}
"137
[; ;MCAL_layer/GPIO/hal_gpio.c: 137: Std_ReturnType gpio_pin_toggle_logic(const pin_config_t* _pin_config)
[v _gpio_pin_toggle_logic `(uc ~T0 @X0 1 ef1`*CS8 ]
"138
[; ;MCAL_layer/GPIO/hal_gpio.c: 138: {
{
[e :U _gpio_pin_toggle_logic ]
"137
[; ;MCAL_layer/GPIO/hal_gpio.c: 137: Std_ReturnType gpio_pin_toggle_logic(const pin_config_t* _pin_config)
[v __pin_config `*CS8 ~T0 @X0 1 r1 ]
"138
[; ;MCAL_layer/GPIO/hal_gpio.c: 138: {
[f ]
"139
[; ;MCAL_layer/GPIO/hal_gpio.c: 139:     Std_ReturnType status=(Std_ReturnType)0x01;
[v _status `uc ~T0 @X0 1 a ]
[e = _status -> -> 1 `i `uc ]
"140
[; ;MCAL_layer/GPIO/hal_gpio.c: 140:     if(((void*)0)==_pin_config || _pin_config->pin > 8 -1 || _pin_config->port > 5 -1)
[e $ ! || || == -> -> -> 0 `i `*v `*CS8 __pin_config > -> . *U __pin_config 1 `i - -> 8 `i -> 1 `i > -> . *U __pin_config 0 `i - -> 5 `i -> 1 `i 32  ]
"141
[; ;MCAL_layer/GPIO/hal_gpio.c: 141:     {
{
"142
[; ;MCAL_layer/GPIO/hal_gpio.c: 142:         status=(Std_ReturnType)0x00;
[e = _status -> -> 0 `i `uc ]
"143
[; ;MCAL_layer/GPIO/hal_gpio.c: 143:     }
}
[e $U 33  ]
"144
[; ;MCAL_layer/GPIO/hal_gpio.c: 144:     else{
[e :U 32 ]
{
"145
[; ;MCAL_layer/GPIO/hal_gpio.c: 145:         (*lat_registers[_pin_config->port]^=((uint8)0x01<<_pin_config->pin));
[e =^ *U *U + &U _lat_registers * -> . *U __pin_config 0 `ux -> -> # *U &U _lat_registers `ui `ux -> << -> -> -> 1 `i `uc `i -> . *U __pin_config 1 `i `uc ]
"146
[; ;MCAL_layer/GPIO/hal_gpio.c: 146:     }
}
[e :U 33 ]
"147
[; ;MCAL_layer/GPIO/hal_gpio.c: 147:     return status;
[e ) _status ]
[e $UE 31  ]
"148
[; ;MCAL_layer/GPIO/hal_gpio.c: 148: }
[e :UE 31 ]
}
"159
[; ;MCAL_layer/GPIO/hal_gpio.c: 159: Std_ReturnType gpio_pin_initalize(const pin_config_t* _pin_config)
[v _gpio_pin_initalize `(uc ~T0 @X0 1 ef1`*CS8 ]
"160
[; ;MCAL_layer/GPIO/hal_gpio.c: 160: {
{
[e :U _gpio_pin_initalize ]
"159
[; ;MCAL_layer/GPIO/hal_gpio.c: 159: Std_ReturnType gpio_pin_initalize(const pin_config_t* _pin_config)
[v __pin_config `*CS8 ~T0 @X0 1 r1 ]
"160
[; ;MCAL_layer/GPIO/hal_gpio.c: 160: {
[f ]
"161
[; ;MCAL_layer/GPIO/hal_gpio.c: 161:     Std_ReturnType ret=(Std_ReturnType)0x01;
[v _ret `uc ~T0 @X0 1 a ]
[e = _ret -> -> 1 `i `uc ]
"162
[; ;MCAL_layer/GPIO/hal_gpio.c: 162:     if(((void*)0) == _pin_config)
[e $ ! == -> -> -> 0 `i `*v `*CS8 __pin_config 35  ]
"163
[; ;MCAL_layer/GPIO/hal_gpio.c: 163:     {
{
"164
[; ;MCAL_layer/GPIO/hal_gpio.c: 164:         ret=(Std_ReturnType)0x00;
[e = _ret -> -> 0 `i `uc ]
"165
[; ;MCAL_layer/GPIO/hal_gpio.c: 165:     }
}
[e $U 36  ]
"166
[; ;MCAL_layer/GPIO/hal_gpio.c: 166:     else
[e :U 35 ]
"167
[; ;MCAL_layer/GPIO/hal_gpio.c: 167:     {
{
"168
[; ;MCAL_layer/GPIO/hal_gpio.c: 168:         ret=gpio_pin_direction_initalize(_pin_config);
[e = _ret ( _gpio_pin_direction_initalize (1 __pin_config ]
"169
[; ;MCAL_layer/GPIO/hal_gpio.c: 169:         ret=gpio_pin_write_logic(_pin_config,_pin_config->logic);
[e = _ret ( _gpio_pin_write_logic (2 , __pin_config -> . *U __pin_config 3 `E492 ]
"170
[; ;MCAL_layer/GPIO/hal_gpio.c: 170:     }
}
[e :U 36 ]
"171
[; ;MCAL_layer/GPIO/hal_gpio.c: 171:     return ret;
[e ) _ret ]
[e $UE 34  ]
"172
[; ;MCAL_layer/GPIO/hal_gpio.c: 172: }
[e :UE 34 ]
}
"184
[; ;MCAL_layer/GPIO/hal_gpio.c: 184: Std_ReturnType gpio_port_direction_initalize(port_index_t port,uint8 direction)
[v _gpio_port_direction_initalize `(uc ~T0 @X0 1 ef2`E510`uc ]
"185
[; ;MCAL_layer/GPIO/hal_gpio.c: 185: {
{
[e :U _gpio_port_direction_initalize ]
"184
[; ;MCAL_layer/GPIO/hal_gpio.c: 184: Std_ReturnType gpio_port_direction_initalize(port_index_t port,uint8 direction)
[v _port `E510 ~T0 @X0 1 r1 ]
[v _direction `uc ~T0 @X0 1 r2 ]
"185
[; ;MCAL_layer/GPIO/hal_gpio.c: 185: {
[f ]
"186
[; ;MCAL_layer/GPIO/hal_gpio.c: 186:     Std_ReturnType status=(Std_ReturnType)0x01;
[v _status `uc ~T0 @X0 1 a ]
[e = _status -> -> 1 `i `uc ]
"187
[; ;MCAL_layer/GPIO/hal_gpio.c: 187:     if(port > 5 -1)
[e $ ! > -> _port `ui -> - -> 5 `i -> 1 `i `ui 38  ]
"188
[; ;MCAL_layer/GPIO/hal_gpio.c: 188:     {
{
"189
[; ;MCAL_layer/GPIO/hal_gpio.c: 189:         status=(Std_ReturnType)0x00;
[e = _status -> -> 0 `i `uc ]
"190
[; ;MCAL_layer/GPIO/hal_gpio.c: 190:     }
}
[e $U 39  ]
"191
[; ;MCAL_layer/GPIO/hal_gpio.c: 191:     else
[e :U 38 ]
"192
[; ;MCAL_layer/GPIO/hal_gpio.c: 192:     {
{
"193
[; ;MCAL_layer/GPIO/hal_gpio.c: 193:         *tris_registers[port]=direction;
[e = *U *U + &U _tris_registers * -> _port `ux -> -> # *U &U _tris_registers `ui `ux _direction ]
"194
[; ;MCAL_layer/GPIO/hal_gpio.c: 194:     }
}
[e :U 39 ]
"195
[; ;MCAL_layer/GPIO/hal_gpio.c: 195:     return status;
[e ) _status ]
[e $UE 37  ]
"196
[; ;MCAL_layer/GPIO/hal_gpio.c: 196: }
[e :UE 37 ]
}
"207
[; ;MCAL_layer/GPIO/hal_gpio.c: 207: Std_ReturnType gpio_port_get_direction_status(port_index_t port,uint8 *direction_status)
[v _gpio_port_get_direction_status `(uc ~T0 @X0 1 ef2`E510`*uc ]
"208
[; ;MCAL_layer/GPIO/hal_gpio.c: 208: {
{
[e :U _gpio_port_get_direction_status ]
"207
[; ;MCAL_layer/GPIO/hal_gpio.c: 207: Std_ReturnType gpio_port_get_direction_status(port_index_t port,uint8 *direction_status)
[v _port `E510 ~T0 @X0 1 r1 ]
[v _direction_status `*uc ~T0 @X0 1 r2 ]
"208
[; ;MCAL_layer/GPIO/hal_gpio.c: 208: {
[f ]
"209
[; ;MCAL_layer/GPIO/hal_gpio.c: 209:     Std_ReturnType status=(Std_ReturnType)0x01;
[v _status `uc ~T0 @X0 1 a ]
[e = _status -> -> 1 `i `uc ]
"210
[; ;MCAL_layer/GPIO/hal_gpio.c: 210:     if(((void*)0) ==direction_status || port > 5 -1)
[e $ ! || == -> -> -> 0 `i `*v `*uc _direction_status > -> _port `ui -> - -> 5 `i -> 1 `i `ui 41  ]
"211
[; ;MCAL_layer/GPIO/hal_gpio.c: 211:     {
{
"212
[; ;MCAL_layer/GPIO/hal_gpio.c: 212:         status=(Std_ReturnType)0x00;
[e = _status -> -> 0 `i `uc ]
"213
[; ;MCAL_layer/GPIO/hal_gpio.c: 213:     }
}
[e $U 42  ]
"214
[; ;MCAL_layer/GPIO/hal_gpio.c: 214:     else{
[e :U 41 ]
{
"215
[; ;MCAL_layer/GPIO/hal_gpio.c: 215:         *direction_status = *tris_registers[port];
[e = *U _direction_status *U *U + &U _tris_registers * -> _port `ux -> -> # *U &U _tris_registers `ui `ux ]
"216
[; ;MCAL_layer/GPIO/hal_gpio.c: 216:     }
}
[e :U 42 ]
"217
[; ;MCAL_layer/GPIO/hal_gpio.c: 217:     return status;
[e ) _status ]
[e $UE 40  ]
"218
[; ;MCAL_layer/GPIO/hal_gpio.c: 218: }
[e :UE 40 ]
}
"229
[; ;MCAL_layer/GPIO/hal_gpio.c: 229: Std_ReturnType gpio_port_write_logic(port_index_t port,uint8 logic)
[v _gpio_port_write_logic `(uc ~T0 @X0 1 ef2`E510`uc ]
"230
[; ;MCAL_layer/GPIO/hal_gpio.c: 230: {
{
[e :U _gpio_port_write_logic ]
"229
[; ;MCAL_layer/GPIO/hal_gpio.c: 229: Std_ReturnType gpio_port_write_logic(port_index_t port,uint8 logic)
[v _port `E510 ~T0 @X0 1 r1 ]
[v _logic `uc ~T0 @X0 1 r2 ]
"230
[; ;MCAL_layer/GPIO/hal_gpio.c: 230: {
[f ]
"231
[; ;MCAL_layer/GPIO/hal_gpio.c: 231:     Std_ReturnType status=(Std_ReturnType)0x01;
[v _status `uc ~T0 @X0 1 a ]
[e = _status -> -> 1 `i `uc ]
"232
[; ;MCAL_layer/GPIO/hal_gpio.c: 232:     if(port > 5 -1)
[e $ ! > -> _port `ui -> - -> 5 `i -> 1 `i `ui 44  ]
"233
[; ;MCAL_layer/GPIO/hal_gpio.c: 233:     {
{
"234
[; ;MCAL_layer/GPIO/hal_gpio.c: 234:         status = (Std_ReturnType)0x00;
[e = _status -> -> 0 `i `uc ]
"235
[; ;MCAL_layer/GPIO/hal_gpio.c: 235:     }
}
[e $U 45  ]
"236
[; ;MCAL_layer/GPIO/hal_gpio.c: 236:     else
[e :U 44 ]
"237
[; ;MCAL_layer/GPIO/hal_gpio.c: 237:     {
{
"238
[; ;MCAL_layer/GPIO/hal_gpio.c: 238:         *lat_registers[port]=logic;
[e = *U *U + &U _lat_registers * -> _port `ux -> -> # *U &U _lat_registers `ui `ux _logic ]
"239
[; ;MCAL_layer/GPIO/hal_gpio.c: 239:     }
}
[e :U 45 ]
"240
[; ;MCAL_layer/GPIO/hal_gpio.c: 240:     return status;
[e ) _status ]
[e $UE 43  ]
"241
[; ;MCAL_layer/GPIO/hal_gpio.c: 241: }
[e :UE 43 ]
}
"252
[; ;MCAL_layer/GPIO/hal_gpio.c: 252: Std_ReturnType gpio_port_read_logic(port_index_t port,uint8 *logic)
[v _gpio_port_read_logic `(uc ~T0 @X0 1 ef2`E510`*uc ]
"253
[; ;MCAL_layer/GPIO/hal_gpio.c: 253: {
{
[e :U _gpio_port_read_logic ]
"252
[; ;MCAL_layer/GPIO/hal_gpio.c: 252: Std_ReturnType gpio_port_read_logic(port_index_t port,uint8 *logic)
[v _port `E510 ~T0 @X0 1 r1 ]
[v _logic `*uc ~T0 @X0 1 r2 ]
"253
[; ;MCAL_layer/GPIO/hal_gpio.c: 253: {
[f ]
"254
[; ;MCAL_layer/GPIO/hal_gpio.c: 254:     Std_ReturnType status=(Std_ReturnType)0x01;
[v _status `uc ~T0 @X0 1 a ]
[e = _status -> -> 1 `i `uc ]
"255
[; ;MCAL_layer/GPIO/hal_gpio.c: 255:     if(((void*)0) ==logic || port > 5 -1)
[e $ ! || == -> -> -> 0 `i `*v `*uc _logic > -> _port `ui -> - -> 5 `i -> 1 `i `ui 47  ]
"256
[; ;MCAL_layer/GPIO/hal_gpio.c: 256:     {
{
"257
[; ;MCAL_layer/GPIO/hal_gpio.c: 257:         status=(Std_ReturnType)0x00;
[e = _status -> -> 0 `i `uc ]
"258
[; ;MCAL_layer/GPIO/hal_gpio.c: 258:     }
}
[e $U 48  ]
"259
[; ;MCAL_layer/GPIO/hal_gpio.c: 259:     else{
[e :U 47 ]
{
"260
[; ;MCAL_layer/GPIO/hal_gpio.c: 260:         *logic=*lat_registers[port];
[e = *U _logic *U *U + &U _lat_registers * -> _port `ux -> -> # *U &U _lat_registers `ui `ux ]
"261
[; ;MCAL_layer/GPIO/hal_gpio.c: 261:     }
}
[e :U 48 ]
"262
[; ;MCAL_layer/GPIO/hal_gpio.c: 262:     return status;
[e ) _status ]
[e $UE 46  ]
"263
[; ;MCAL_layer/GPIO/hal_gpio.c: 263: }
[e :UE 46 ]
}
"274
[; ;MCAL_layer/GPIO/hal_gpio.c: 274: Std_ReturnType gpio_port_toggle_logic(port_index_t port)
[v _gpio_port_toggle_logic `(uc ~T0 @X0 1 ef1`E510 ]
"275
[; ;MCAL_layer/GPIO/hal_gpio.c: 275: {
{
[e :U _gpio_port_toggle_logic ]
"274
[; ;MCAL_layer/GPIO/hal_gpio.c: 274: Std_ReturnType gpio_port_toggle_logic(port_index_t port)
[v _port `E510 ~T0 @X0 1 r1 ]
"275
[; ;MCAL_layer/GPIO/hal_gpio.c: 275: {
[f ]
"276
[; ;MCAL_layer/GPIO/hal_gpio.c: 276:     Std_ReturnType status=(Std_ReturnType)0x01;
[v _status `uc ~T0 @X0 1 a ]
[e = _status -> -> 1 `i `uc ]
"277
[; ;MCAL_layer/GPIO/hal_gpio.c: 277:     if(port>5 -1)
[e $ ! > -> _port `ui -> - -> 5 `i -> 1 `i `ui 50  ]
"278
[; ;MCAL_layer/GPIO/hal_gpio.c: 278:     {
{
"279
[; ;MCAL_layer/GPIO/hal_gpio.c: 279:         status=(Std_ReturnType)0x00;
[e = _status -> -> 0 `i `uc ]
"280
[; ;MCAL_layer/GPIO/hal_gpio.c: 280:     }
}
[e $U 51  ]
"281
[; ;MCAL_layer/GPIO/hal_gpio.c: 281:     else
[e :U 50 ]
"282
[; ;MCAL_layer/GPIO/hal_gpio.c: 282:     {
{
"283
[; ;MCAL_layer/GPIO/hal_gpio.c: 283:         *lat_registers[port]^=(uint8)0xFF;
[e =^ *U *U + &U _lat_registers * -> _port `ux -> -> # *U &U _lat_registers `ui `ux -> -> -> 255 `i `uc `uc ]
"284
[; ;MCAL_layer/GPIO/hal_gpio.c: 284:     }
}
[e :U 51 ]
"285
[; ;MCAL_layer/GPIO/hal_gpio.c: 285:     return status;
[e ) _status ]
[e $UE 49  ]
"286
[; ;MCAL_layer/GPIO/hal_gpio.c: 286: }
[e :UE 49 ]
}
